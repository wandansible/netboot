# {{ ansible_managed }}

default={{ netboot_grub_default_boot_entry }}
timeout={{ netboot_default_boot_delay }}
echo "Default boot entry is set to {{ netboot_grub_default_boot_entry }}"

echo "Trying grub/$net_default_mac"
configfile "grub/$net_default_mac"

{% set paths = [
    '/EFI/debian/grubx64.efi',
    '/EFI/ubuntu/grubx64.efi',
    '/EFI/fedora/shim.efi',
    '/EFI/fedora/grubx64.efi',
    '/EFI/redhat/shim.efi',
    '/EFI/redhat/grubx64.efi',
    '/EFI/centos/shim.efi',
    '/EFI/centos/grubx64.efi',
    '/EFI/rocky/shim.efi',
    '/EFI/rocky/grubx64.efi',
    '/EFI/sles/grubx64.efi',
    '/EFI/opensuse/grubx64.efi',
    '/EFI/Microsoft/boot/bootmgfw.efi'
  ]
%}
insmod part_gpt
insmod fat
insmod chain

menuentry 'Chainload Grub2 EFI from ESP' --id local_chain_hd0 {
  echo "Chainloading Grub2 EFI from ESP, enabled devices for booting:"
  ls
{% for path in paths %}
  echo "Trying {{ path }}"
  unset chroot
  # add --efidisk-only when using Software RAID
  search --file --no-floppy --set=chroot {{ path }}
  if [ -f ($chroot){{ path }} ]; then
    chainloader ($chroot){{ path }}
    echo "Found {{ path }} at $chroot, attempting to chainboot it..."
    sleep 2
    boot
  fi
{% endfor %}
  echo "Partition with known EFI file not found, you may want to drop to grub shell"
  echo "and investigate available files updating 'grub.cfg' ansible template and"
  echo "the list of known filepaths for probing. Available devices are:"
  echo
  ls
  echo
  echo "If you cannot see the HDD, make sure the drive is marked as bootable in EFI and"
  echo "not hidden. Boot order must be the following:"
  echo "1) NETWORK"
  echo "2) HDD"
  echo
  echo "The system will poweroff in 2 minutes or press ESC to poweroff immediately."
  sleep -i 120
  halt
}

menuentry 'Chainload into BIOS bootloader on first disk' --id local_chain_legacy_hd0 {
  set root=(hd0,0)
  chainloader +1
  boot
}

menuentry 'Chainload into BIOS bootloader on second disk' --id local_chain_legacy_hd1 {
  set root=(hd1,0)
  chainloader +1
  boot
}
